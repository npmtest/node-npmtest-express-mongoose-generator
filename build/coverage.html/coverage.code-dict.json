{"/home/travis/build/npmtest/node-npmtest-express-mongoose-generator/test.js":"/* istanbul instrument in package npmtest_express_mongoose_generator */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-express-mongoose-generator/lib.npmtest_express_mongoose_generator.js":"/* istanbul instrument in package npmtest_express_mongoose_generator */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_express_mongoose_generator = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_express_mongoose_generator = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-express-mongoose-generator/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-express-mongoose-generator && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_express_mongoose_generator */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_express_mongoose_generator\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_express_mongoose_generator.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_express_mongoose_generator.rollup.js'] =\n            local.assetsDict['/assets.npmtest_express_mongoose_generator.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_express_mongoose_generator.__dirname + '/lib.npmtest_express_mongoose_generator.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-express-mongoose-generator/node_modules/express-mongoose-generator/bin/mongoose-gen":"#!/usr/bin/env node\n\n/**\n * Module dependencies\n */\nvar program  = require('commander');\nvar readline = require('readline');\nvar async    = require('async');\nvar generators = require('../lib/generators');\nvar cliStyles = require('../lib/cliStyles');\n\nvar pkg = require('../package.json');\nvar version = pkg.version;\n\nvar rl = readline.createInterface({\n    input : process.stdin,\n    output: process.stdout\n});\n\nvar ALLOWED_FIELDS_TYPES = ['string', 'number', 'date', 'boolean', 'array', 'objectId'];\nvar ALLOWED_REST_ARGUMENT = {'YES': 'yes', 'NO': 'no'};\nvar ALLOWED_FILE_TREE_ARGUMENT = {'TYPE': 't', 'MODULE': 'm'};\nvar CLI_PHRASES = {\n    AVAILABLE_TYPE: 'Available types : string, number, date, boolean, array, objectId',\n    QUESTION_MODEL_NAME: 'Model Name : ',\n    QUESTION_FIELD_NAME: 'Field Name (press <return> to stop adding fields) : ',\n    QUESTION_FIELD_TYPE: 'Field Type [string] : ',\n    QUESTION_FIELD_REF: 'Reference (model name referred by the objectId field) : ',\n    QUESTION_GENERATE_REST: 'Generate Rest (yes/no) ? [yes] : ',\n    QUESTION_FILES_TREE: 'Files tree generation grouped by Type or by Module (t/m) ? [t] : ',\n    ERROR_MODEL_NAME: 'Argument required : Model name',\n    ERROR_TYPE_ARGUMENT: 'Invalid Argument : Field type is not allowed',\n    ERROR_REST_ARGUMENT: 'Argument invalid : rest',\n    ERROR_FILES_TREE_ARGUMENT: 'Argument invalid : file tree generation',\n    ERROR_FIELD_REQUIRED: 'Argument required : fields',\n    ERROR_FIELD_NAME_REQUIRED: 'Argument required : Field Name',\n    ERROR_FIELD_TYPE_REQUIRED: 'Argument required : Field type',\n    ERROR_FIELD_TYPE_INVALID: 'Invalid Argument : Field type is not allowed'\n};\n\n// CLI\nprogram\n    .version(version)\n    .usage('[options]')\n    .option('-m, --model <modelName>', 'model name')\n    .option('-f, --fields <fields>', 'model fields (name1:type1,name2:type2)')\n    .option('-r, --rest', 'enable generation REST')\n    .option('-t, --tree <tree>', 'files tree generation grouped by <t>ype or by <m>odule')\n    .parse(process.argv)\n;\n\n// Main program\n(function (path) {\n    if (program.model || program.fields) {\n        runNonInteractiveMode(path);\n    } else {\n        runInteractiveMode(path);\n    }\n})('.');\n\n/**\n * Get parameters in interactive mode\n * @param {string} path destination path\n */\nfunction runInteractiveMode (path) {\n    async.series({\n            name: function (cb) {\n                askQuestion(CLI_PHRASES.QUESTION_MODEL_NAME, isModelNameParamValid, function (name) {\n                    console.log(cliStyles.green + CLI_PHRASES.AVAILABLE_TYPE + cliStyles.reset);\n                    cb(null, name);\n                });\n            },\n            fields: function (cb) {\n                var exit   = false;\n                var fields = [];\n                var currentField = {};\n\n                async.whilst(\n                    function () { return !exit; },\n                    function (cb) {\n                        async.series({\n                                name: function (cb) {\n                                    askQuestion(CLI_PHRASES.QUESTION_FIELD_NAME,\n                                        null,\n                                        function (fieldName) {\n                                            if (fieldName.trim().length === 0) {\n                                                exit = true;\n                                            }\n                                            cb(exit, fieldName);\n                                        }\n                                    );\n                                },\n                                type: function (cb) {\n                                    askQuestion(CLI_PHRASES.QUESTION_FIELD_TYPE, isFieldTypeParamValid,\n                                        function (fieldType) {\n                                            currentField.type = (fieldType.trim().length === 0) ? 'string' : fieldType;\n                                            cb(null, currentField.type);\n                                        }\n                                    );\n                                },\n                                reference: function (cb) {\n                                    if (currentField.type === 'objectId') {\n                                        askQuestion(CLI_PHRASES.QUESTION_FIELD_REF, null, function (referenceName) {\n                                            referenceName = (referenceName.trim().length === 0) ?\n                                                'INSERT_YOUR_REFERENCE_NAME_HERE'\n                                                : referenceName;\n                                            cb(null, referenceName);\n                                        });\n                                    } else {\n                                        cb(null, null);\n                                    }\n                                }\n                            },\n                            function (err, results) {\n                                if (!err) {\n                                    fields.push(results);\n                                }\n                                cb();\n                            });\n                    },\n                    function (err, results) {\n                        cb(null, fields);\n                    });\n            },\n            rest: function (cb) {\n                askQuestion(CLI_PHRASES.QUESTION_GENERATE_REST, isRestParamValid, function (rest) {\n                    rest = (rest.trim().length === 0) ? 'yes' : rest;\n                    cb(null, rest);\n                });\n            },\n            generateMethod: function (cb) {\n                askQuestion(CLI_PHRASES.QUESTION_FILES_TREE, isFileTreeParamValid, function (generateMethod) {\n                    generateMethod = (generateMethod.trim().length === 0) ? 't' : generateMethod;\n                    cb(null, generateMethod);\n                });\n            }\n        },\n        function (err, results) {\n            if (err) {\n                return closeProgram();\n            }\n\n            async.parallel([\n                    function (cb) {\n                        generators.generateModel(path, results.name, results.fields, results.generateMethod, cb);\n                    },\n                    function (cb) {\n                        if (results.rest !== 'yes') { return cb(); }\n                        generators.generateRouter(path, results.name, results.generateMethod, cb);\n                    }            ,\n                    function (cb) {\n                        if (results.rest !== 'yes') { return cb(); }\n                        generators.generateController(path, results.name, results.fields, results.generateMethod, cb);\n                    }\n                ],\n                function (err, results) {\n                    closeProgram();\n                }\n            );\n        }\n    );\n}\n\n/**\n * Get parameters in non-interactive mode\n * @param {string} path destination path\n */\nfunction runNonInteractiveMode(path) {\n    if (!isModelNameParamValid(program.model) || !isFieldsParamValid(program.fields)) {\n        return closeProgram();\n    }\n\n    var modelName = program.model;\n    var modelFields = formatFieldsParamInArray(program.fields);\n    var fileTree = program.tree || ALLOWED_FILE_TREE_ARGUMENT.TYPE;\n\n    if (!isFileTreeParamValid(fileTree)) {\n        return closeProgram();\n    }\n\n    if (!modelFields) { return closeProgram(); }\n\n    async.parallel([\n            function (cb) {\n                generators.generateModel(path, modelName, modelFields, fileTree, cb);\n            },\n            function (cb) {\n                if (!program.rest) { return cb(); }\n                generators.generateRouter(path, modelName, fileTree, cb);\n            },\n            function (cb) {\n                if (!program.rest) { return cb(); }\n                generators.generateController(path, modelName, modelFields, fileTree, cb);\n            }\n        ],\n        function (err, results) {\n            closeProgram();\n        }\n    );\n}\n\n/**\n * Ask a question in the console and waits for a response\n * if the answer is invalid, the question is recalled\n * @param {string} question input question in the console\n * @param {function} validate validation function (nullable)\n * @param {function} callback callback function\n */\nfunction askQuestion(question, validate, callback) {\n    rl.question(question, function(answer) {\n        if (validate) {\n            if (!validate(answer)) {\n                askQuestion(question, validate, callback);\n                return ;\n            }\n        }\n        callback(answer);\n    });\n}\n\n/**\n * Close the program\n */\nfunction closeProgram() {\n    rl.close();\n    process.exit();\n}\n\n/**\n * Validate model name input\n * @param {string} name\n * @returns {boolean} is validated\n */\nfunction isModelNameParamValid(name) {\n    if (!name || name.trim().length === 0) {\n        consoleError(CLI_PHRASES.ERROR_MODEL_NAME);\n        return false;\n    }\n    return true;\n}\n\n/**\n * validate field type input\n * @param {string} fieldType\n * @returns {boolean} is validated\n */\nfunction isFieldTypeParamValid(fieldType) {\n    if (!fieldType || fieldType.trim().length === 0) { fieldType = ALLOWED_FIELDS_TYPES[0]; } // default value\n    if (ALLOWED_FIELDS_TYPES.indexOf(fieldType) === -1) {\n        consoleError(CLI_PHRASES.ERROR_TYPE_ARGUMENT);\n        return false;\n    }\n    return true;\n}\n\n/**\n * validate rest input\n * @param {string} param\n * @returns {boolean} is validated\n */\nfunction isRestParamValid(param) {\n    if (!param || param.trim().length === 0) { param = ALLOWED_REST_ARGUMENT.YES; } // default value\n    if (param !== ALLOWED_REST_ARGUMENT.YES && param !== ALLOWED_REST_ARGUMENT.NO) {\n        consoleError(CLI_PHRASES.ERROR_REST_ARGUMENT);\n        return false;\n    }\n    return true;\n}\n\n/**\n * validate file tree generation input\n * @param {string} param\n * @returns {boolean} is validated\n */\nfunction isFileTreeParamValid(param) {\n    if (!param || param.trim().length === 0) { param = ALLOWED_FILE_TREE_ARGUMENT.TYPE; } // default value\n    if (param !== ALLOWED_FILE_TREE_ARGUMENT.TYPE && param !== ALLOWED_FILE_TREE_ARGUMENT.MODULE) {\n        consoleError(CLI_PHRASES.ERROR_FILES_TREE_ARGUMENT);\n        return false;\n    }\n    return true;\n}\n\n/**\n * Validate fields input\n * @param {string} fields\n * @returns {boolean} is validated\n */\nfunction isFieldsParamValid(fields) {\n    if (!fields || fields.trim().length === 0) {\n        consoleError(CLI_PHRASES.ERROR_FIELD_REQUIRED);\n        return false;\n    }\n    return true;\n}\n\n/**\n * Validate name / type of a field\n * @param {string} fieldName\n * @param {string} fieldType\n * @returns {boolean} is validated\n */\nfunction isFieldValid(fieldName, fieldType) {\n    if (!fieldName || fieldName.trim().length === 0) {\n        consoleError(CLI_PHRASES.ERROR_FIELD_NAME_REQUIRED);\n        return false;\n    }\n    if (!fieldType || fieldType.trim().length === 0) {\n        consoleError(CLI_PHRASES.ERROR_FIELD_TYPE_REQUIRED);\n        return false;\n    }\n    if (ALLOWED_FIELDS_TYPES.indexOf(fieldType) === -1) {\n        consoleError(CLI_PHRASES.ERROR_FIELD_TYPE_INVALID);\n        return false;\n    }\n    return true;\n}\n\n/**\n * Format fields input in array\n * @param {string} fields fields input\n * @returns {Array} fields formatted\n */\nfunction formatFieldsParamInArray(fields) {\n    var arrayFields = fields.split(',');\n    var result = [];\n\n    var err = arrayFields.every(function (field) {\n        var f = field.split(':');\n        var fieldName = f[0];\n        var fieldType = (f[1] || ALLOWED_FIELDS_TYPES[0]);\n\n        if (!isFieldValid(fieldName, fieldType)) { return false; }\n\n        result.push({\n            name: fieldName,\n            type: fieldType\n        });\n\n        return true;\n    });\n\n    return (!err) ? false : result;\n}\n\nfunction consoleError(msg) {\n    return console.log(cliStyles.red + msg + cliStyles.reset);\n}\n","/home/travis/build/npmtest/node-npmtest-express-mongoose-generator/node_modules/express-mongoose-generator/lib/generators.js":"/**\n * Module dependencies\n */\nvar ft = require('./fileTools');\nvar formatTools = require('./formatTools');\n\n/**\n * Generate a Mongoose model\n * @param {string} path\n * @param {string} modelName\n * @param {array} modelFields\n * @param {string} generateMethod\n * @param {function} cb\n */\nfunction generateModel(path, modelName, modelFields, generateMethod, cb) {\n    var fields = formatTools.getFieldsForModelTemplate(modelFields);\n    var schemaName = modelName + 'Schema';\n\n    var model = ft.loadTemplateSync('model.js');\n    model = model.replace(/{modelName}/, modelName);\n    model = model.replace(/{schemaName}/g, schemaName);\n    model = model.replace(/{fields}/, fields);\n\n    if (generateMethod == 't') {\n        ft.createDirIfIsNotDefined(path, 'models', function () {\n            ft.writeFile(path + '/models/' + modelName + 'Model.js', model, null, cb);\n        });\n    } else {\n        ft.createDirIfIsNotDefined(path, modelName, function () {\n            ft.writeFile(path + '/' + modelName + '/' + modelName + 'Model.js', model, null, cb);\n        });\n    }\n}\n\n/**\n * Generate a Express router\n * @param {string} path\n * @param {string} modelName\n * @param {string} generateMethod\n * @param {function} cb\n */\nfunction generateRouter(path, modelName, generateMethod, cb) {\n    var router = ft.loadTemplateSync('router.js');\n    router = router.replace(/{controllerName}/g, modelName + 'Controller');\n\n    if (generateMethod == 't') {\n        ft.createDirIfIsNotDefined(path, 'routes', function () {\n            router = router.replace(/{controllerPath}/g, '\\'../controllers/' + modelName + 'Controller.js\\'');\n            ft.writeFile(path + '/routes/' + modelName + 'Routes.js', router, null, cb);\n        });\n    } else {\n        ft.createDirIfIsNotDefined(path, modelName, function () {\n            router = router.replace(/{controllerPath}/g, '\\'./' + modelName + 'Controller.js\\'');\n            ft.writeFile(path + '/' + modelName + '/' + modelName + 'Routes.js', router, null, cb);\n        });\n    }\n}\n\n/**\n * Generate Controller\n * @param {string} path\n * @param {string} modelName\n * @param {array} modelFields\n * @param {string} generateMethod\n * @param {function} cb\n */\nfunction generateController(path, modelName, modelFields, generateMethod, cb) {\n    var controller = ft.loadTemplateSync('controller.js');\n\n    var updateFields = '';\n    var createFields = '\\r';\n\n    modelFields.forEach(function (f, index, fields) {\n        var field = f.name;\n\n        updateFields += modelName + '.' + field + ' = req.body.' + field + ' ? req.body.' + field + ' : ' +\n            modelName + '.' + field + ';';\n        updateFields += '\\r\\t\\t\\t';\n\n        createFields += '\\t\\t\\t' + field + ' : req.body.' + field;\n        createFields += ((fields.length - 1) > index) ? ',\\r' : '\\r';\n    });\n\n    controller = controller.replace(/{modelName}/g, modelName + 'Model');\n    controller = controller.replace(/{name}/g, modelName);\n    controller = controller.replace(/{pluralName}/g, formatTools.pluralize(modelName));\n    controller = controller.replace(/{controllerName}/g, modelName + 'Controller');\n    controller = controller.replace(/{createFields}/g, createFields);\n    controller = controller.replace(/{updateFields}/g, updateFields);\n\n    if (generateMethod == 't') {\n        ft.createDirIfIsNotDefined(path, 'controllers', function () {\n            controller = controller.replace(/{modelPath}/g, '\\'../models/' + modelName + 'Model.js\\'');\n            ft.writeFile(path + '/controllers/' + modelName + 'Controller.js', controller, null, cb);\n        });\n    } else {\n        ft.createDirIfIsNotDefined(path, modelName, function () {\n            controller = controller.replace(/{modelPath}/g, '\\'./' + modelName + 'Model.js\\'');\n            ft.writeFile(path + '/' + modelName + '/' + modelName + 'Controller.js', controller, null, cb);\n        });\n    }\n}\n\nmodule.exports = {\n    generateModel: generateModel,\n    generateRouter: generateRouter,\n    generateController: generateController\n};\n","/home/travis/build/npmtest/node-npmtest-express-mongoose-generator/node_modules/express-mongoose-generator/lib/fileTools.js":"/**\n * Module dependencies\n */\nvar fs   = require('fs');\nvar path = require('path');\nvar cliStyles = require('./cliStyles');\n\n/**\n * Create a directory if not defined\n * @param {string} dirPath directory path parent\n * @param {string} dirName directory name to find\n * @param {function} cb callback\n */\nfunction createDirIfIsNotDefined(dirPath, dirName, cb) {\n    if (!fs.existsSync(dirPath + '/' + dirName)){\n        fs.mkdirSync(dirPath + '/' + dirName);\n        console.info(cliStyles.cyan + '\\tcreate' + cliStyles.reset + ': ' + dirPath + '/' + dirName);\n    }\n\n    cb();\n}\n\n/**\n * Write a file\n * @param {string} path file path to write\n * @param {string} contents file contents to write\n * @param {int} mode write mode\n * @param {function} cb callback\n */\nfunction writeFile(path, contents, mode, cb) {\n    fs.writeFile(path, contents, {mode: mode || 0666}, function (err) {\n        if (err) { throw err; }\n        console.info(cliStyles.cyan + '\\tcreate' + cliStyles.reset + ': ' + path);\n        cb();\n    });\n}\n\n/**\n * Load a template\n * @param {string} name template name\n * @returns {string} template contents\n */\nfunction loadTemplateSync(name) {\n    return fs.readFileSync(path.join(__dirname, '..', 'templates', name), 'utf-8');\n}\n\nmodule.exports = {\n    createDirIfIsNotDefined: createDirIfIsNotDefined,\n    writeFile: writeFile,\n    loadTemplateSync: loadTemplateSync\n};\n","/home/travis/build/npmtest/node-npmtest-express-mongoose-generator/node_modules/express-mongoose-generator/lib/cliStyles.js":"module.exports = {\n    reset: '\\u001b[39m',\n    cyan: '\\u001b[36m',\n    red: '\\u001b[31m',\n    green: '\\u001b[32m'\n};\n","/home/travis/build/npmtest/node-npmtest-express-mongoose-generator/node_modules/express-mongoose-generator/lib/formatTools.js":"var referenceType = require('../templates/fieldReferenceType');\nvar allowedFieldsTypes = {\n    'string'  : String,\n    'number'  : Number,\n    'date'    : Date,\n    'boolean' : Boolean,\n    'array'   : Array,\n    'objectId': referenceType\n};\n\n/**\n * Format the fields for the model template\n * @param {array} fields fields input\n * @returns {string} formatted fields\n */\nfunction getFieldsForModelTemplate(fields) {\n    var lg = fields.length - 1;\n\n    var modelFields = '{\\r';\n    fields.forEach(function(field, index, array) {\n        modelFields += '\\t\\'' + field.name + '\\' : ' + (allowedFieldsTypes[field.type]).name;\n        modelFields += (lg > index) ? ',\\r' : '\\r';\n        if (field.reference) {\n            modelFields = modelFields.replace(/{ref}/, field.reference);\n        }\n    });\n    modelFields += '}';\n\n    return modelFields;\n}\n\n/**\n * Puts a word in the plural\n * @param {string} word\n * @returns {string}\n */\nfunction pluralize(word) {\n    return word + 's';\n}\n\nmodule.exports = {\n    getFieldsForModelTemplate: getFieldsForModelTemplate,\n    pluralize: pluralize\n};\n","/home/travis/build/npmtest/node-npmtest-express-mongoose-generator/node_modules/express-mongoose-generator/templates/fieldReferenceType.js":"\nvar objectId = {\n    name: '{\\r' +\n    '\\t \\ttype: Schema.Types.ObjectId,\\r' +\n    '\\t \\tref: \\'{ref}\\'\\r' +\n    '\\t}'\n};\n\nmodule.exports = objectId;\n","/home/travis/build/npmtest/node-npmtest-express-mongoose-generator/node_modules/express-mongoose-generator/templates/controller.js":"var {modelName} = require({modelPath});\n\n/**\n * {controllerName}.js\n *\n * @description :: Server-side logic for managing {pluralName}.\n */\nmodule.exports = {\n\n    /**\n     * {controllerName}.list()\n     */\n    list: function (req, res) {\n        {modelName}.find(function (err, {pluralName}) {\n            if (err) {\n                return res.status(500).json({\n                    message: 'Error when getting {name}.',\n                    error: err\n                });\n            }\n            return res.json({pluralName});\n        });\n    },\n\n    /**\n     * {controllerName}.show()\n     */\n    show: function (req, res) {\n        var id = req.params.id;\n        {modelName}.findOne({_id: id}, function (err, {name}) {\n            if (err) {\n                return res.status(500).json({\n                    message: 'Error when getting {name}.',\n                    error: err\n                });\n            }\n            if (!{name}) {\n                return res.status(404).json({\n                    message: 'No such {name}'\n                });\n            }\n            return res.json({name});\n        });\n    },\n\n    /**\n     * {controllerName}.create()\n     */\n    create: function (req, res) {\n        var {name} = new {modelName}({{createFields}\n        });\n\n        {name}.save(function (err, {name}) {\n            if (err) {\n                return res.status(500).json({\n                    message: 'Error when creating {name}',\n                    error: err\n                });\n            }\n            return res.status(201).json({name});\n        });\n    },\n\n    /**\n     * {controllerName}.update()\n     */\n    update: function (req, res) {\n        var id = req.params.id;\n        {modelName}.findOne({_id: id}, function (err, {name}) {\n            if (err) {\n                return res.status(500).json({\n                    message: 'Error when getting {name}',\n                    error: err\n                });\n            }\n            if (!{name}) {\n                return res.status(404).json({\n                    message: 'No such {name}'\n                });\n            }\n\n            {updateFields}\n            {name}.save(function (err, {name}) {\n                if (err) {\n                    return res.status(500).json({\n                        message: 'Error when updating {name}.',\n                        error: err\n                    });\n                }\n\n                return res.json({name});\n            });\n        });\n    },\n\n    /**\n     * {controllerName}.remove()\n     */\n    remove: function (req, res) {\n        var id = req.params.id;\n        {modelName}.findByIdAndRemove(id, function (err, {name}) {\n            if (err) {\n                return res.status(500).json({\n                    message: 'Error when deleting the {name}.',\n                    error: err\n                });\n            }\n            return res.status(204).json();\n        });\n    }\n};\n","/home/travis/build/npmtest/node-npmtest-express-mongoose-generator/node_modules/express-mongoose-generator/templates/model.js":"var mongoose = require('mongoose');\nvar Schema   = mongoose.Schema;\n\nvar {schemaName} = new Schema({fields});\n\nmodule.exports = mongoose.model('{modelName}', {schemaName});\n","/home/travis/build/npmtest/node-npmtest-express-mongoose-generator/node_modules/express-mongoose-generator/templates/router.js":"var express = require('express');\nvar router = express.Router();\nvar {controllerName} = require({controllerPath});\n\n/*\n * GET\n */\nrouter.get('/', {controllerName}.list);\n\n/*\n * GET\n */\nrouter.get('/:id', {controllerName}.show);\n\n/*\n * POST\n */\nrouter.post('/', {controllerName}.create);\n\n/*\n * PUT\n */\nrouter.put('/:id', {controllerName}.update);\n\n/*\n * DELETE\n */\nrouter.delete('/:id', {controllerName}.remove);\n\nmodule.exports = router;\n"}